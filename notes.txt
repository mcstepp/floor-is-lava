### Forum

1. Threads
2. Reply
3. Users
4. Channels
5. Profiles
6. Favoritable
6. Records Activity (Activity Feed)

### Relationships
A. Thread is created by a user.
B. A reply belongs to a thread, and belongs to a user.
C. Every thread belongs to a channel.
D. Activity belongs to a [thread|reply] (morphMany)

### Tinker/seeder commands
A. Refresh if needed
    1. php artisan migrate:refresh
B. Tinker
    1. php artisan tinker
    2. $threads = factory('App\Thread', 50)->create();
    3. $threads->each(function($thread){
        factory('App\Reply', 10)->create(['thread_id' => $thread->id]);
    });

### Artisan Commands
A. Table migrations
    1. php artisan make:migration create_favorites_table --create=favorites
        a. create migration called 'create_favorites_table'
        b. create a table called 'favorites'
        c. Pivot table

### Testing

A. General
    1. Use separate testing database, not the local/prod database.
    2. Configure testing env in .env and phpunit.xml
    3. config/database.php exposes DB_DATABASE
    4. Use :memory: -> not using an actual file, just do it memory. it's just a test
    5. Use DatabaseMigrations trait -> for every test, migrate everything that needs to be migrated.
       If anything changes, roll it back before the test completes. UNDO IT ALL.
    6. start test names with "test_" or add a doc block before the test
    7. Need a better error message? Write your own. Wrap test code in try/catch block, catching the exception and returning custom message
B.  Testing commands
    1. phpunit

C. Test Setup
    1. Extends setup method -> `setUp()`
    2. Call parent setup first
    3. Reusable
        a. Assign thread to `this`
D. Feature Tests
    1. High-level, browser side user tests
    2. $this->actingAs()
        a. Defers to $this->be();
    3. CreateThreadsTest.php
        a. $thread = create('App\Thread'); => creates thread and posts it, used to retrieve id
        b. $this->post('/threads', $thread->toArray()); => uses POST method endpoint to test posting with auth middleware
        c. Assumption in testing; thread that is tested is not the thread the authenticated test user posted.
        d. One solution is to check the response location => where did it redirect?
        e. Soft Delete => If you use SoftDelete in the model, you can test it like this:
           i. $this->assertDatabaseMissing('threads', ['id' => $thread->id, 'deleted_at' => null ]);

E. Unit tests
    1. Inside-out tests, granular

F. Mocking
    1. actingAs vs Be
        a. $this->actingAs() defers to $this->be();
    2. Create -> persists, make -> just the instance, raw -> just array data

### Artisan / composer song and dance
A. php artisan cache:clear -> clears caches, unfucks some stucks.
B. composer dump-autoload -o -> main culprit esp. when working with vagrant and things not updating
    a. use when updating composer.json
C. Honorable Mentions
    1. composer update
    2. php artisan migrate:rollback

### Show Threads
A. Links
    1. path method right on the model -> `$thread->path()`
        a. Thread knows about the url?
        b. No, it just knows a string presentation of the thread
    2. Typical way -> build up using id, title, slug, whatever floats your boat

B. Replies
    1. Since using `author`, need to use foreign key (user_id) so it matches to something in the database for the relationship (no author_id)
    2. Showing Counts
        a. $thread->replies->count()
            i. Does a query behind the scenes to fetch *all* the replies on the thread just to do a count
        b. $thread->replies()->count()
            i. SQL is updated to just do a count rather pulling *all* the replies, then the count of that collection
        c. ThreadsController@show => Thread::withCount('replies')->first()
            i. Finds the thread, also includes replies_count property
        d. Helper method to Replies / custom getter
        e. Global query scope => if every time you fetch replies, you need to get the count associated with it
            i. Able to show in different views
            ii. boot() => laravel knows to trigger automatically
            iii. global scope is just a query scope that is automatically applied to all the queries
            iv. all the queries for thread should includer reply_count

C. Channels
    1. Using Slug
        a. Route Model Binding typically uses the id to associate with the model
        b. Override //TODO: clean this up

D. Filters
    1. By Username
    2. Popularity => by most replies

E. Favoriting
    1. Concerns
        a. User may only favorite once
            i. protect at database layer `$table->unique()`
            ii. protect at PHP level
        b. N+1 problems => See Refactoring (below)
     2. UI
        a. Holding off on javascript/ajax for now => traditional form
        b. Disabling button if user already favorited => will refactor to DELETE (unfavorite)


### Validation
1. If validation fails, redirect back to previous page, populates error with validation key
2. User can post to a valid channel
    a. What is a valid channel => value `exists:table,column_name`

### Deleting a Thread
1. Deleting a thread should also delete replies (no orphans!)
    a. Option 1 => setting a foreign key on the replies table.
        i.onDelete, cascade down the relationships on replies, and delete them with the thread
        ii. `$table->foreign('threads_id')->onDelete('cas');`
        iii. Con => some people aren't fans of adding constraints at that level
    b. Option 2 => do it in the PHP
        i. ThreadsController@delete
        ii. Grab all the replies associated with a thread and delete
        iii. `$threads->replies()->delete()`
    c. Option 3 => override delete method on the Model
    d. Option 4 => Model events
        i. in the model file, in the boot() => when you're deleting the thread, as part of that process, delete associated replies.
        ii. static::deleting(function ($thread){
            $threads->replies->delete();
        });

### Activity Feed
1. Use a trait with morphMany relationship
2. `subject_id` refers to the model id, `subject_type` => model
3. Activity Feed reads model events
    a. Don't need activity for every model event
    b. Don't need activity for every model
    c. Model Events => ['booted', 'created', 'updated', 'deleted'

### Authorization Policies
1. Like 'guard' model, will check permissions.
2. Implementation
    a. Use `@can()` or `@cannot()` in blade templates.
    b. Use `$this->authorize('method', Model)` in controllers => automatically returns 403 if unauthorized
    c. before() => if returns true, instant access.
3. Global Admin policies, for common rules application-wide:
    a. AuthServiceProvider => boot()
        i. `Gate::before(function ($user){
               if ( //whatever admin ) { return true; }
            });`

### Removing SQL queries from the view template
1. Option 1 => ThreadController, pass in $channel
    a. Fine for one-offs, but we need to reference channels constantly
    b. Do not want to reproduce the query over and over.
2. Option 2 => Service Provider
    a. Shared views
    b. Runs before the DatabaseMigrations in tests

### Refactoring
1. Extract to a Method => protected method on the controller
2. Extract to dedicated query objects
    a. fancy word for a class whose name corresponds to a query,
    b. wraps weighty, complicated SQL
    c. to retrieve => $this->(new ThreadsQuery)->get();
3. Filtering Class
    a. New filters => new methods
4. N+1 problems
    a. Easy to forget that these methods are making query behind the scenes. [Will refactor soon]
    b. Eager loading relationships in the controller => `load()`
    c. 55 Queries ??!! => culprit: Threads.path() defers to channel relationship
    d. 4 queries => cache the channels, only fetch when a channel doesn't exist in the cache;
5. Global Scopes
    a. on the model, if there's never a time you don't want to disable global scope, use `protected $with=[''];`
    b. Use `static::addGlobalScope` in the boot method if you want to be able to disable the add'l info.
6. Trait
    a. Use a trait when you would have the same boot methods across different models
    b. See `RecordsActivity`, `Reply.php`, `Thread.php`

### General Notes
1. Law of Demeter => only use one dot or ->, no a.b.method().
   When one wants a dog to walk, one does not command the dog's legs to walk directly;
   instead one commands the dog which then commands its own legs.
2. Inlining => use double-quotes to inline PHP with curly-brackets (see Thread.php and ThreadTest.php), not single quotes.
    Single quotes are for strings.
3. toSql() => spits out full sql
4. Laravel DebugBar is awesome!! => https://github.com/barryvdh/laravel-debugbar