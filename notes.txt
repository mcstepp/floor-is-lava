### Forum

1. Threads
2. Reply
3. Users

A. Thread is created by a user
B. A reply belongs to a thread, and belongs to a user.

### Tinker/seeder commands
A. Refresh if needed
    1. php artisan migrate:refresh
B. Tinker
    1. php artisan tinker
    2. $threads = factory('App\Thread', 50)->create();
    3. $threads->each(function($thread){
        factory('App\Reply', 10)->create(['thread_id' => $thread->id]);
    });

### Testing

A. General
    1. Use separate testing database, not the local/prod database.
    2. Configure testing env in .env and phpunit.xml
    3. config/database.php exposes DB_DATABASE
    4. Use :memory: -> not using an actual file, just do it memory. it's just a test
    5. Use DatabaseMigrations trait -> for every test, migrate everything that needs to be migrated.
       If anything changes, roll it back before the test completes. UNDO IT ALL.
    6. start test names with "test_" or add a doc block before the test
B.  Testing commands
    1. phpunit

C. Test Setup
    1. Extends setup method -> `setUp()`
    2. Call parent setup first
    3. Reusable
        a. Assign thread to `this`
D. Feature Tests
    1. High-level, browser side user tests
    2. $this->actingAs()
        a. Defers to $this->be();

E. Unit tests
    1. Inside-out tests, granular

F. Mocking
    1. actingAs vs Be
        a. $this->actingAs() defers to $this->be();
    2. Create -> persists, make -> just the instance, raw -> just array data

### Artisan / composer song and dance
A. php artisan cache:clear -> clears caches, unfucks some stucks.
B. composer dump-autoload -o -> main culprit esp. when working with vagrant and things not updating
    a. use when updating composer.json
C. Honorable Mentions
    1. composer update
    2. php artisan migrate:rollback

### Show Threads
A. Links
    1. path method right on the model -> `$thread->path()`
        a. Thread knows about the url?
        b. No, it just knows a string presentation of the thread
    2. Typical way -> build up using id, title, slug, whatever floats your boat

B. Replies
    1. Since using `author`, need to use foreign key (user_id) so it matches to something in the database for the relationship (no author_id)


### General Notes
1. Law of Demeter - only use one dot or ->, no a.b.method().
   When one wants a dog to walk, one does not command the dog's legs to walk directly;
   instead one commands the dog which then commands its own legs.